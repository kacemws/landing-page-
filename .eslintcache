[{"C:\\DevMobile\\Neo\\landing-page\\src\\index.js":"1","C:\\DevMobile\\Neo\\landing-page\\src\\App.js":"2","C:\\DevMobile\\Neo\\landing-page\\src\\reportWebVitals.js":"3","C:\\DevMobile\\Neo\\landing-page\\src\\Views\\Signin.js":"4","C:\\DevMobile\\Neo\\landing-page\\src\\Components\\image.js":"5","C:\\DevMobile\\Neo\\landing-page\\src\\Views\\Signup.js":"6","C:\\DevMobile\\Neo\\landing-page\\src\\Views\\CodeConfirmation.js":"7"},{"size":478,"mtime":1609353748105,"results":"8","hashOfConfig":"9"},{"size":667,"mtime":1611870737898,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4520,"mtime":1609619484962,"results":"12","hashOfConfig":"9"},{"size":298,"mtime":1609612930744,"results":"13","hashOfConfig":"9"},{"size":9522,"mtime":1609619563551,"results":"14","hashOfConfig":"9"},{"size":1184,"mtime":1611873833303,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1aetgac",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"18"},"C:\\DevMobile\\Neo\\landing-page\\src\\index.js",[],["36","37"],"C:\\DevMobile\\Neo\\landing-page\\src\\App.js",[],"C:\\DevMobile\\Neo\\landing-page\\src\\reportWebVitals.js",[],"C:\\DevMobile\\Neo\\landing-page\\src\\Views\\Signin.js",["38"],"import React, { useState } from \"react\";\r\nimport \"../Style/Views/Signin.scss\";\r\nimport LandingImage from \"../Components/image\";\r\nimport logo from \"../Assets/neo.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport default function Signin() {\r\n  const history = useHistory();\r\n\r\n  const { register, handleSubmit, errors, setError } = useForm({\r\n    mode: \"onBlur\",\r\n  }); //settings for react hook form\r\n\r\n  const [innerLoading, setInnerLoading] = useState(false); // to know wheter we are fetching data or not\r\n  const onSubmit = (data) => {\r\n    if (!innerLoading) {\r\n      setInnerLoading(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sign-in\">\r\n      <div className=\"container\">\r\n        <div className=\"left-part\">\r\n          <div className=\"header\">\r\n            <img className=\"logo\" src={logo} alt=\"neo's logo\" />\r\n          </div>\r\n          <div className=\"content\">\r\n            <LandingImage />\r\n          </div>\r\n          <div className=\"greetings legend\">\r\n            <h1\r\n              style={{\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              Gérer votre commerce en un click !\r\n            </h1>\r\n            <h3>Installez NEO Et Prenez L'Avantage Sur Vos Concurents</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-part\">\r\n          <div className=\"right-part-inner\">\r\n            {/*Header*/}\r\n            <header>\r\n              <img className=\"logo\" src={logo} alt=\"neo's logo\" />\r\n            </header>\r\n            {/*Header*/}\r\n\r\n            {/*Title*/}\r\n            <div className=\"greetings\">\r\n              <h1>Bienvenu à NEO</h1>\r\n              <h3>\r\n                Nouveau?{\" \"}\r\n                <span\r\n                  className=\"highlited\"\r\n                  onClick={(_) => {\r\n                    if (!innerLoading) history.push(\"sign-up\");\r\n                  }}\r\n                >\r\n                  S'inscrire\r\n                </span>\r\n              </h3>\r\n            </div>\r\n            {/*Title*/}\r\n\r\n            {/*Form*/}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              {/*Username field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"username\">\r\n                  Nom d'utilisateur\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.username && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  ref={register({\r\n                    required: true,\r\n                    maxLength: 20,\r\n                  })}\r\n                />\r\n                {errors.username && (\r\n                  <div className=\"error\">\r\n                    {errors.username.type === \"manual\"\r\n                      ? errors.username.message\r\n                      : \"Veuillez introduire une valeur valide\"}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Username field*/}\r\n\r\n              {/*Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"password\">\r\n                  <div>Mot de passe</div>\r\n                  <div className=\"forgot-password\">Mot de passe oublié?</div>\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.password && (\r\n                  <div className=\"error\">\r\n                    Veuillez introduire une valeur valide\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Password field*/}\r\n\r\n              <div className=\"button\">\r\n                <button className=\"submit-button\" type=\"submit\">\r\n                  Se connecter\r\n                </button>\r\n                {innerLoading && (\r\n                  <div className=\"overlay\">\r\n                    <div className=\"spinner\"></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </form>\r\n            {/*Form*/}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\DevMobile\\Neo\\landing-page\\src\\Components\\image.js",["39"],"import React from \"react\";\r\nimport landingImage from \"../Assets/landing-image.svg\";\r\nexport default function LandingImage() {\r\n  return (\r\n    <>\r\n      <img\r\n        src={landingImage}\r\n        style={{\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",["40","41"],"C:\\DevMobile\\Neo\\landing-page\\src\\Views\\Signup.js",["42","43"],"import React, { useState } from \"react\";\r\nimport \"../Style/Views/Signup.scss\";\r\nimport LandingImage from \"../Components/image\";\r\nimport logo from \"../Assets/neo.png\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default function Signup() {\r\n  const history = useHistory();\r\n\r\n  const { register, handleSubmit, errors, getValues, setError } = useForm({\r\n    mode: \"onBlur\",\r\n  }); //settings for react hook form\r\n\r\n  const [innerLoading, setInnerLoading] = useState(false); // to know wheter we are fetching data or not\r\n\r\n  const onSubmit = (data) => {\r\n    if (!innerLoading) {\r\n      setInnerLoading(true);\r\n      let aux = Object.assign({}, data);\r\n      delete aux[\"confirm_password\"];\r\n      aux.phone_number = \"+213\" + aux.phone_number.substring(1);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"sign-up\">\r\n      <div className=\"container\">\r\n        <div className=\"left-part\">\r\n          <div className=\"header\">\r\n            <img className=\"logo\" src={logo} alt=\"neo's logo\" />\r\n          </div>\r\n          <div className=\"content\">\r\n            <LandingImage />\r\n          </div>\r\n          <div className=\"greetings legend\">\r\n            <h1\r\n              style={{\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              Gérer votre commerce en un click !\r\n            </h1>\r\n            <h3>Installez NEO Et Prenez L'Avantage Sur Vos Concurents</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"right-part\">\r\n          <div className=\"right-part-inner\">\r\n            <header>\r\n              <img className=\"logo\" src={logo} alt=\"neo's logo\" />\r\n            </header>\r\n            {/*Header*/}\r\n\r\n            {/*Form*/}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              {/*Username field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"username\">\r\n                  Nom d'utilisateur\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.username && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  ref={register({\r\n                    required: true,\r\n                    maxLength: 20,\r\n                  })}\r\n                />\r\n                {errors.username ? (\r\n                  <div className=\"error\">\r\n                    {errors.username.type === \"manual\"\r\n                      ? errors.username.message\r\n                      : \"Veuillez introduire une valeur valide\"}\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n              {/*Username field*/}\r\n\r\n              {/*first & last name field*/}\r\n              <div className=\"name-container\">\r\n                <div className=\"input-container\">\r\n                  <label className=\"label\" htmlFor=\"last_name\">\r\n                    Nom\r\n                  </label>\r\n                  <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"last_name\"\r\n                    ref={register({\r\n                      required: true,\r\n                    })}\r\n                    style={{\r\n                      borderColor: errors.last_name && \"red\",\r\n                    }}\r\n                  />\r\n                  {errors.last_name && (\r\n                    <div className=\"error\">\r\n                      Veuillez introduire une valeur valide\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"input-container\">\r\n                  <label className=\"label\" htmlFor=\"first_name\">\r\n                    Prénoms\r\n                  </label>\r\n                  <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"first_name\"\r\n                    ref={register({\r\n                      required: true,\r\n                    })}\r\n                    style={{\r\n                      borderColor: errors.first_name && \"red\",\r\n                    }}\r\n                  />\r\n                  {errors.first_name && (\r\n                    <div className=\"error\">\r\n                      Veuillez introduire une valeur valide\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              {/*first & last name field*/}\r\n\r\n              {/*Email field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"email\">\r\n                  Email\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  ref={register({\r\n                    required: true,\r\n                    validate: (value) => {\r\n                      return value.includes(\"@\");\r\n                    },\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.email && \"red\",\r\n                  }}\r\n                />\r\n                {errors.email && (\r\n                  <div className=\"error\">\r\n                    {errors.email.type === \"validate\"\r\n                      ? \"Veuillez inclure un @\"\r\n                      : errors.email.type === \"manual\"\r\n                      ? errors.email.message\r\n                      : \"Veuillez introduire une valeur valide\"}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Email field*/}\r\n\r\n              {/*Phone field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"phone_number\">\r\n                  Numéro de Téléphone\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  style={{\r\n                    borderColor: errors.number && \"red\",\r\n                  }}\r\n                  type=\"text\"\r\n                  name=\"phone_number\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 10,\r\n                    validate: (str) => {\r\n                      return RegExp(\"[0-9]{10}\").test(str);\r\n                    },\r\n                  })}\r\n                />\r\n                {errors.phone_number && (\r\n                  <div className=\"error\">\r\n                    {errors.phone_number.type === \"manual\"\r\n                      ? errors.phone_number.message\r\n                      : \"Veuillez introduire une valeur valide\"}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Phone field*/}\r\n\r\n              {/*Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"password\">\r\n                  Mot de passe\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.password && (\r\n                  <div className=\"error\">\r\n                    Veuillez introduire une valeur valide\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Password field*/}\r\n\r\n              {/*Confirm Password field*/}\r\n              <div className=\"input-container\">\r\n                <label className=\"label\" htmlFor=\"confirm_password\">\r\n                  Confirmez votre Mot de passe\r\n                </label>\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"password\"\r\n                  name=\"confirm_password\"\r\n                  ref={register({\r\n                    required: true,\r\n                    minLength: 8,\r\n                    validate: (password) => {\r\n                      return getValues(\"password\") == password;\r\n                    },\r\n                  })}\r\n                  style={{\r\n                    borderColor: errors.confirm_password && \"red\",\r\n                  }}\r\n                />\r\n                {errors.confirm_password && (\r\n                  <div className=\"error\">\r\n                    Veuillez saisire une valeur correspondante\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {/*Confirm Password field*/}\r\n\r\n              <div className=\"button\">\r\n                <button className=\"submit-button\" type=\"submit\">\r\n                  S'inscrire\r\n                </button>\r\n                {innerLoading && (\r\n                  <div className=\"overlay\">\r\n                    <div className=\"spinner\"></div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </form>\r\n            {/*Form*/}\r\n\r\n            <div className=\"sign-in\">\r\n              <h3>\r\n                Déjà membre ?\r\n                <span\r\n                  className=\"highlited\"\r\n                  onClick={(_) => {\r\n                    history.push(\"/\");\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  Connectez-vous!\r\n                </span>\r\n              </h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\DevMobile\\Neo\\landing-page\\src\\Views\\CodeConfirmation.js",["44","45"],"import React from \"react\";\r\nimport \"../Style/Views/CodeConfirmation.scss\";\r\nimport phone from \"../Assets/phone-code.webp\";\r\nimport retry from \"../Assets/resend.svg\";\r\n\r\nfunction CodeConfirmation() {\r\n  return (\r\n    <div className=\"code-confirmation\">\r\n      <div className=\"card\">\r\n        <div className=\"container\">\r\n          <div className=\"header\">\r\n            <img src={phone} />\r\n          </div>\r\n          <div className=\"content\">\r\n            <div className=\"input\">\r\n              <input type=\"tel\" name=\"verification-code\" />\r\n            </div>\r\n            <div className=\"button\">\r\n              <div className=\"icon\">\r\n                <img src={retry} />\r\n              </div>\r\n              <div className=\"text\">Envoyer de nouveau</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"footer\">\r\n            <div className=\"button\">\r\n              <div className=\"text\">Continuer la prochaine fois</div>\r\n            </div>\r\n            <div className=\"button primary\">\r\n              <div className=\"text\">Valider</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodeConfirmation;\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":10,"column":43,"nodeType":"52","messageId":"53","endLine":10,"endColumn":51},{"ruleId":"54","severity":1,"message":"55","line":6,"column":7,"nodeType":"56","endLine":12,"endColumn":9},{"ruleId":"46","replacedBy":"57"},{"ruleId":"48","replacedBy":"58"},{"ruleId":"50","severity":1,"message":"51","line":11,"column":54,"nodeType":"52","messageId":"53","endLine":11,"endColumn":62},{"ruleId":"59","severity":1,"message":"60","line":231,"column":52,"nodeType":"61","messageId":"62","endLine":231,"endColumn":54},{"ruleId":"54","severity":1,"message":"55","line":12,"column":13,"nodeType":"56","endLine":12,"endColumn":32},{"ruleId":"54","severity":1,"message":"55","line":20,"column":17,"nodeType":"56","endLine":20,"endColumn":36},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["63"],["64"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]